// Generated by gencpp from file football_game/ReachGoalResponse.msg
// DO NOT EDIT!


#ifndef FOOTBALL_GAME_MESSAGE_REACHGOALRESPONSE_H
#define FOOTBALL_GAME_MESSAGE_REACHGOALRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace football_game
{
template <class ContainerAllocator>
struct ReachGoalResponse_
{
  typedef ReachGoalResponse_<ContainerAllocator> Type;

  ReachGoalResponse_()
    : ack(false)  {
    }
  ReachGoalResponse_(const ContainerAllocator& _alloc)
    : ack(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ack_type;
  _ack_type ack;





  typedef boost::shared_ptr< ::football_game::ReachGoalResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::football_game::ReachGoalResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ReachGoalResponse_

typedef ::football_game::ReachGoalResponse_<std::allocator<void> > ReachGoalResponse;

typedef boost::shared_ptr< ::football_game::ReachGoalResponse > ReachGoalResponsePtr;
typedef boost::shared_ptr< ::football_game::ReachGoalResponse const> ReachGoalResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::football_game::ReachGoalResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::football_game::ReachGoalResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace football_game

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::football_game::ReachGoalResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::football_game::ReachGoalResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::football_game::ReachGoalResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::football_game::ReachGoalResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::football_game::ReachGoalResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::football_game::ReachGoalResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::football_game::ReachGoalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8f5729177853f34b146e2e57766d4dc2";
  }

  static const char* value(const ::football_game::ReachGoalResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8f5729177853f34bULL;
  static const uint64_t static_value2 = 0x146e2e57766d4dc2ULL;
};

template<class ContainerAllocator>
struct DataType< ::football_game::ReachGoalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "football_game/ReachGoalResponse";
  }

  static const char* value(const ::football_game::ReachGoalResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::football_game::ReachGoalResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ack\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::football_game::ReachGoalResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::football_game::ReachGoalResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ack);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReachGoalResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::football_game::ReachGoalResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::football_game::ReachGoalResponse_<ContainerAllocator>& v)
  {
    s << indent << "ack: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ack);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FOOTBALL_GAME_MESSAGE_REACHGOALRESPONSE_H
